#+title: Building Absctractions With Data

* 읽기 전의 생각
객체지향 프로그래밍에서 흔히 사용하는 class, struct를 말하는 것 같다.
앞선 챕터에서는 계산 절차의 추상화를 봤다면 이번에는 데이터 객체를 추상화하여
원시적인 데이터 타입들을 엮어 더 높은 차원에서 값들을 다룸으로써 인지적 부하를
줄이는 것을 설명하고 있는 듯 하다.

* 읽고 기록

- 함수는 프로세스(작업)의 지역적인 진화 패턴으로 간주할 수 있다.
#+begin_quote
We saw that a procedure can be regarded as a pattern for the local evolution of a process, and we classified, reasoned about,
and performed simple algorithmic analyses of some common patterns
for processes as embodied in procedures.
#+end_quote


- 고차원 함수가 일반적인 계산 방법을 조작할 수 있게 함으로써 그에 맞게 생각하도록 만들 수 있다. 이것이 프로그래밍의 정수이다.
#+begin_quote
We also saw that higher-order procedures enhance the power of our language by enabling us to manipulate, and thereby to reason in terms of, general methods of computation. This is much of the essence of programming.
#+end_quote

- 데이터의 추상화가 필요한 이유는
#+begin_quote
Programs are typically designed to model complex phenomena, and more often than not one must construct computational objects that have several parts in order to model real-world phenomena that have several aspects

프로그램은 일반적으로 복잡한 현상을 모델링하도록 설계되며, 여러 측면을 가진 실제 현상을 모델링하기 위해 여러 부분으로 구성된 계산 객체를 구성해야 하는 경우가 많습니다.
#+end_quote

- 프로그래밍 언어에서 복합 데이터를 왜 원하는가?
  #+begin_quote
  to elevate the conceptual level at which we can design our programs, to increase the modularity of our designs, and to enhance the expressive power of our language.

  프로그램을 설계할 수 있는 개념적 수준을 높이고, 설계의 모듈성을 높이고, 언어의 표현력을 향상시키기 위해.
  #+end_quote

  프로시져와 데이터의 추상화는 동사와 명사의 추상화와 같다고 봐도 될 것 같다.
  가장 원시적인 동사를 'Eat'이라고 한다면 이와 같은 원시 동사들을 조합한 새로운 동사를 정의할 수 있다. 예를 들어 '특별한 날에 많은 사람들과 먹고 마시는 행위'를 'Feast'라는 동사로 추상화할 수 있다.

  데이터의 추상화의 예를 생각해보면 '보리 혹은 밀 따위를 효모를 사용해 발효시켜 구운 것'을 '빵'이라는 명사로 축약해 정의할 수 있다. 그리고 그 '빵'이라는 데이터로 '케이크', '피자' 등의 더 높은 차원으로 추상화된 명사들도 만들 수 있다.

  #+begin_quote
  It would be much better if we could “glue together” a numerator and denominator to form a pair—a compound data object—that our programs could manipulate in a way that would be consistent with regarding a rational number as a single conceptual unit.

  유리수를 단일 개념 단위로 간주하는 것과 일치하는 방식으로 프로그램이 조작할 수 있는 쌍(복합 데이터 개체)을 형성하기 위해 분자와 분모를 "함께 붙일" 수 있다면 훨씬 더 좋을 것입니다.
  #+end_quote

  ~1/2 + 2/3~ 을 계산할 때, 각 분자와 분모를 정수로 계산하고, 각 분자, 분모간의 관계까지 추적해가며 계산하는 식을 짜는 것은 복잡하고 어렵다. 1/2를 1/2 자체로 계산할 수 있게 데이터를 추상화하는 것이 더 낫다.

  #+begin_quote
  The general technique of isolating the parts of a program that deal with how data objects are represented from the parts of a program that deal with how data objects are used is a powerful design methodology called data abstraction.

  데이터 객체가 사용되는 방법을 처리하는 프로그램 부분에서 데이터 객체가 표현되는 방식을 처리하는 프로그램 부분을 분리하는 일반적인 기술은 데이터 추상화라는 강력한 설계 방법론입니다.
  #+end_quote

  '데이터가 어떻게 사용되는가'로부터 '데이터가 어떻게 표현되는가'를 분리해내는 것이 데이터 추상화이다. 우리가 커피를 내릴 때 필요한 데이터는 볶은 원두와 물이다. 함수는 원두를 가는 것과 그 위에 뜨거운 물을 붓는 것이다. 여기에서 원두는 추상화된 상태일 것이다. 원두를 더 작은 원소로 나눠볼 수 있기 때문이다. '커피 내리기'에서 사용되는 원두라는 데이터는 맥락적으로 '볶아져 있는 상태의 커피나무의 씨앗'이다. 여기서는 '볶아져 있다'라는 상태와 '커피나무의 씨앗'이라는 객체가 복합적으로 존재한다. 이 씨앗으로부터 커피를 만들 때 항상 긴 의미들의 조합을 사용해야 하면 머리 아프니 이 조합을 추상화해 원두라고 표현하게 된다. 그러고 나면 이 원두를 사용할 때 당연히 볶아져 있는 상태이겠거니 추정할 수 있다.


#+begin_quote
The use of compound data leads to a real increase in the expressive power of our programming language. Consider the idea of forming a “linear combination” ax+by.

복합 데이터를 사용하면 프로그래밍 언어의 표현력이 실제로 증가합니다. "선형 조합" ax+by를 계산하는 식을 생각해봅시다.
#+end_quote

  #+begin_src scheme
  (define (linear-combination a b x y)
  (+ (* a x) (* b y)))
  #+end_src

  정수들이라면 문제가 없다. 하지만 인자들이 정수 뿐만이 아니라 유리수, 복소수, 다항식등 다양한 형태의 값을 받을 수 있게 만들려면 어떻게 해야할까?

  #+begin_src scheme
(define (linear-combination a b x y)
  (add (mul a x) (mul b y)))
  #+end_src

  원시적인 함수인 +, *을 추상화한 add, mul을 만들 수 있다.
  이때 ~linear-combination~ 이 알아야 할 것은 'add와 mul이 인자들의 형에 따른 적절한 계산을 할 것'이라는 사실 뿐이다.

  - 근데 여기서 추상화되는 것은 데이터가 아니라 프로시져가 아닌가?
    위의 예로 보면 자바스크립트는 이미 원시 함수 + 등의 추상화가 이뤄진 것 같다.
    스킴에서 (+ "a" "b") 는 에러이지만 ("a" + "b")는 "ab" 이니 들어오는 데이터에 따라 적절한 계산을 해주는 것 같다.

    #+begin_quote
    There are many possible kinds of glue. Indeed, we will discover how to form compound data using no special “data” operations at all, only procedures. This will further blur the distinction between “procedure” and “data,” which was already becoming tenuous toward the end of chapter 1.

    복합적인 데이터를 형성하는 방식에는 많은 종류의 접착제가 존재한다. 실제로 우리는 특별한 "데이터" 작업을 전혀 사용하지 않고 절차만 사용하여 복합 데이터를 형성하는 방법을 발견할 것입니다. 이렇게 하면 1장 끝에서 이미 모호해지고 있던 "프로시져"와 "데이터" 사이의 구분이 더욱 흐려질 것입니다.
    #+end_quote

    #+begin_quote
    One key idea in dealing with compound data is the notion of closure—that the glue we use for combining data objects should allow us to combine not only primitive data objects, but compound data objects as well. Another key idea is that compound data objects can serve as conventional interfaces for combining program modules in mix-and-match ways

    복합 데이터를 다루는 핵심 아이디어 중 하나는 클로저의 개념입니다. 즉, 데이터 객체를 결합하는 데 사용하는 접착제를 사용하면 기본 데이터 개체뿐만 아니라 복합 데이터 개체도 결합할 수 있어야 합니다. 또 다른 핵심 아이디어는 복합 데이터 객체가 믹스 앤 매치 방식으로 프로그램 모듈을 결합하기 위한 관습적인 인터페이스 역할을 할 수 있다는 것입니다.
    #+end_quote

    1. 클로저를 활용하면 원시 데이터 뿐 아니라 복합 데이터의 결합도 가능하다.
    2. 복합 데이터 객체는 모듈을 갈아 끼울 수 있게 돕는 인터페이스 역할을 할 수 있다.

    #+begin_quote
    We will then augment the representational power of our language by introducing symbolic expressions-data whose elementary parts can be arbitrary symbols rather than only numbers.

    그런 다음 상징적 표현(기본 부분이 숫자가 아닌 임의의 기호일 수 있는 데이터)을 도입하여 우리 언어의 표현력을 강화할 것입니다.
    #+end_quote

    #+begin_quote
    Next we will take up the problem of working with data that may be represented differently by different parts of a program. This leads to the need to implement generic operations, which must handle many different types of data.

    다음으로 우리는 프로그램의 다른 부분에 의해 다르게 표현될 수 있는 데이터로 작업하는 문제를 다룰 것입니다. 이로 인해 다양한 유형의 데이터를 처리해야 하는 일반 작업을 구현해야 합니다.
    #+end_quote

    #+begin_quote
    In particular, we introduce data-directed programming as a technique that allows individual data representations to be designed in isolation and then combined additively (i.e., without modification)

    특히 개별 데이터 표현을 개별적으로 설계한 다음 추가로(즉, 수정 없이) 결합할 수 있는 기술로 데이터 지향 프로그래밍을 소개합니다.
    #+end_quote
  

* 이번 챕터에서 앞으로 배울 것 정리
1. 복합 데이터끼리 붙일 수 있도록 데이터를 구성하는 방법.
   - 시퀀스나 트리 구조를 다루는 관습적인 기술.
   - 클로저를 복합 데이터를 결합하는 데 사용하는 방법.
2. 상징적 표현식으로 언어의 표현력을 증강시키는 방법.
   - 데이터 구조를 더 단순한 객체로 표현할 때 표현 방식에 따른 시간,공간 복잡도의 차이.
   - 상징적 차별화, 집합의 표현, 정보의 부호화.
3. 데이터가 사용되는 부분에 따라 다르게 표현되어야 하는 문제를 다루는 방법.
   - 많은 다른 데이터 형을 다뤄야 하는 일반 작업(제너릭)을 구현하는 방법.
   - 데이터 지향 프로그래밍이란 어떤 기법일까?


* 데이터 추상화 소개

#+begin_quote
The analogous notion for compound data is called data abstraction. Data abstraction is a methodology that enables us to isolate how a compound data object is used from the details of how it is constructed from more primitive data objects

복합 데이터에 대한 유사한 개념을 데이터 추상화라고 합니다. 데이터 추상화는 복합 데이터 개체가 보다 원시적인 데이터 개체에서 구성되는 방법에 대한 세부 정보에서 사용되는 방법을 분리할 수 있게 해주는 방법론입니다.
#+end_quote

데이터 추상화는 방법론이다.
어떤 방법론이나면 '복합 데이터 객체가 어떻게 사용되어야 하는가'에 대한 관심을 '복합 데이터가 보다 원시적인 데이터로부터 어떤 식으로 구성되어야 하는가에 대한 세부 정보'로부터 떨어트려 놓는 방법에 대한 이론이다.

#+begin_quote
our programs should use data in such a way as to make no assumptions about the data that are not strictly necessary for performing the task at hand. At the same time, a “concrete” data representation is defined independent of the programs that use the data. The interface between these two parts of our system will be a set of procedures, called selectors and constructors, that implement the abstract data in terms of the concrete representation.

우리 프로그램은 당면한 작업을 수행하는 데 반드시 필요하지 않은 데이터에 대해 가정하지 않는 방식으로 데이터를 사용해야 합니다. 동시에 "구체적인" 데이터 표현은 데이터를 사용하는 프로그램과 독립적으로 정의됩니다. 우리 시스템의 이 두 부분 사이의 인터페이스는 구체적인 표현 측면에서 추상 데이터를 구현하는 선택자와 생성자라고 하는 일련의 절차가 될 것입니다.
#+end_quote

프로그램은 두 부분으로 나눌 수 있다. '어떻게 데이터를 사용하는가'와 '어떻게 데이터를 표현하는가'이다. 추상적인 데이터의 구체적인 표현을 위해 생성자와 선택자라고 부르는 절차를 인터페이스로서 사용할 수 있을 것이다. 이 때 사용을 위해서는 선택자를, 표현을 위해서는 생성자를 사용할 것이다.

#+begin_quote
Suppose we want to do arithmetic with rational numbers. We want to be able to add, subtract, multiply, and divide them and to test whether two rational numbers are equal.

유리수로 산술을 하고 싶다고 가정해 봅시다. 우리는 그것들을 더하고, 빼고, 곱하고, 나눌 수 있고 두 유리수가 같은지 테스트하기를 원합니다.
#+end_quote

*** 가정
1. 이미 분자와 분모로부터 유리수를 구성하는 방법이 있다고 가정한다.
2. 유리수가 주어졌을 때, 분자와 분모를 추출하는 방법이 있다고 가정한다.
3. 생성자와 선택자를 함수로 활용할 수 있다고 가정한다.

*** 가정된 함수
- make-rat는 유리수를 생성한다.
- numer는 유리수에서 분자를 선택한다.
- denom은 유리수에서 분모를 선택한다.

*** 가정 하의 구현
#+begin_src scheme
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
#+end_src

여기서 사용된 전략을 희망적 사고라고 부른다. 당장 구현해야하는 것을 위해 필요한 부품들이 이미 있다고 가정해보는 것이다. 전체를 그린 다음 상세 부품을 구현하면 더 쉬워진다.

이제 분자와 분모를 어떻게 하나의 분수로 표현할 수 있을까에 대해 고민하면 된다. 이를 위해서는 접착제가 필요하다.

** Pairs

#+begin_quote
To enable us to implement the concrete level of our data abstraction, our language provides a compound structure called a pair, which can be constructed with the primitive procedure cons. This procedure takes two arguments and returns a compound data object that contains the two arguments as parts. Given a pair, we can extract the parts using the primitive procedures car and cdr.68 Thus, we can use cons, car, and cdr as follows:

데이터 추상화의 구체적인 수준을 구현할 수 있도록 언어는 기본 프로시저 cons로 구성할 수 있는 쌍이라는 복합 구조를 제공합니다. 이 프로시저는 두 개의 인수를 사용하고 두 인수를 일부로 포함하는 복합 데이터 개체를 반환합니다. 쌍이 주어지면 기본 프로시저 car 및 cdr을 사용하여 부품을 추출할 수 있습니다.68 따라서 cons, car 및 cdr을 다음과 같이 사용할 수 있습니다.
#+end_quote

~cons~ 는 두 개의 인자를 받아 pair라는 복합 구조를 반환한다.
~car~ 는 pair의 첫 번째, ~cdr~ 은 pair의 두 번째 값을 추출한다.

#+begin_src scheme
(cons 1 2)
;Value: (1 . 2)

(car x)
;Value: 1

(cdr x)
;Value: 2
#+end_src


** 유리수 표현하기

#+begin_src scheme
(define (make-rat n d) (cons n d))
(define (numer x) (car x))
(define (denom x) (cdr x))

(define x (make-rat 1 2))
(numer x)
;Value: 1
(denom x)
;Value: 2
#+end_src

예쁘게 출력하는 함수도 만들어보자
#+begin_src scheme
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

; 실행하면 1/2를 출력하고 리턴된 값이 없음을 알려준다.
(print-rat (make-rat 1 2))
1/2
;Unspecified return value
#+end_src

현재 구현된 make-rat의 리턴 값은 최대공약수로 표현되지 않고 있다.
#+begin_src scheme
(print-rat
 (add-rat one-third one-third))
6/9
#+end_src

위 프로시져가 2/3을 출력하도록 make-rat을 고쳐보자.
#+begin_src scheme
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (/ n g)
          (/ d g))))
#+end_src

#+begin_quote
This modification was accomplished by changing the constructor make-rat without changing any of the procedures (such as add-rat and mul-rat) that implement the actual operations.

이 수정은 실제 작업을 구현하는 절차(예: add-rat 및 mul-rat)를 변경하지 않고 생성자 make-rat를 변경하여 수행되었습니다.
#+end_quote

계산 함수 add-rat에서 make-rat(유리수 생성자)의 결과값을 리턴하고 있기 때문에 가능한 일이다.


** 연습 2.1: 양수와 음수 둘 다 다룰 수 있는 make-rat을 만들어보세요.
#+begin_quote
Exercise 2.1: Define a better version of make-rat that handles both positive and negative arguments. Make-rat should normalize the sign so that if the rational number is positive, both the numerator and denominator are positive, and if the rational number is negative, only the numerator is negative.
#+end_quote

- 분수가 양수면 분자와 분모 모두 양수가 되도록 부호를 정규화해야 한다. 반대도 마찬가지.
