#+title: 1.3 Formulating Abstractions with Higher-Order Procedures

#+begin_src scheme
(* 3 3 3)
(define (cube x) (* x x x))
#+end_src

필요할 때 마다 가장 작은 단위의 프로시져를 사용할 수도 있지만 별로 좋지 않다. 묶을 수 있는 패턴은 묶어두는 것이 좋다. 자주 사용할 패턴에 이름을 붙임으로써 인지적 부담을 줄일 수 있다.

#+begin_quote
Our programs would be able to compute cubes, but our language would lack the ability to express the concept of cubing. One of the things we should demand from a powerful programming language is the ability to build abstractions by assigning names to common patterns and then to work in terms of the abstractions directly.
#+end_quote

좋은 프로그래밍 언어는 표현력이 좋아야 한다. 좋은 프로그램은 정확한 추상화로 잘 엮은 패턴들의 집합일 것이다.

파라미터가 숫자같은 기본적 데이터들로 제한된다면 추상화에 한계가 있다. 종종 같은 프로그래밍 패턴에 다양한 프로시져가 함께 사용될 때도 있다. 그런 패턴을 표현하기 위해서는 프로시져를 받고, 프로시져를 리턴하는 프로시져를 만들 필요가 있다. 프로시져를 조작하는 프로시져를 고차원 프로시져(higher-order procedures)라고 부른다.

* 1.3.1 Procedures as Arguments

세 가지 프로시져가 있다.

a부터 b까지의 합을 구하기.
#+begin_src scheme
(define (sum-integers a b)
  (if (> a b)
      0
      (+ a (sum-integers (+ a 1) b))))
#+end_src

a부터 b까지 큐브의 합을 구하기
#+begin_src scheme
(define (sum-cubes a b)
  (if (> a b)
      0
      (+ (cube a)
         (sum-cubes (+ a 1) b))))
#+end_src

a부터 b까지 파이의 합을 구하기
#+begin_src scheme
(define (pi-sum a b)
  (if (> a b)
      0
      (+ (/ 1.0 (* a (+ a 2)))
         (pi-sum (+ a 4) b))))
#+end_src

이 세 프로시져는 공통된 패턴을 가지고 있다.
프로시져의 이름과, 어떻게 합쳐질지, 다음 계산으로 넘기는 값을 제외하고는 동일하다.
그렇기에 다음과 같은 템플릿을 만들 수 있다:

#+begin_src scheme
(define (⟨name⟩ a b)
  (if (> a b)
      0
      (+ (⟨term⟩ a)
         (⟨name⟩ (⟨next⟩ a) b))))
#+end_src

수학자들은 수열의 합을 구하는 것을 추상화하여 "[[https://www.mathsisfun.com/algebra/sigma-notation.html][sigma notation]]"을 만들었다.
#+begin_export latex
4
Σn
n=1
#+end_export
아래의 n은 시작하는 숫자, 위의 숫자는 마지막 숫자, 우측의 n은 어떤걸 계산할 것인지, 함수이다.

위의 템플릿을 활용하면 다음과 같은 함수를 정의할 수 있다:
#+begin_quote scheme
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
#+end_quote

이제 공통 패턴 sum이라는 함수를 다음과 같이 활용할 수 있다.
#+begin_src scheme
(define (inc n) (+ n 1))

(define (sum-cubes a b)
  (sum cube a inc b))
#+end_src


추상화를 활용하여 중복을 제거하기 전에 단순한 우연의 일치로 중복되는 부분은 아닌지 생각해보는 것이 중요하다.

* 1.3.2 Lambda로 프로시져 구성하기

사소한 것들은 익명 함수로 바로 정의할 수 있다.

** let으로 지역 변수 만들기
#+begin_src scheme
(define (f x y)
  (define (f-helper a b)
    (+ (* x (square a))
       (* y b)
       (* a b)))
  (f-helper (+ 1 (* x y))
            (- 1 y)))
#+end_src

#+begin_src scheme
(define (f x y)
  ((lambda (a b)
     (+ (* x (square a))
        (* y b)
        (* a b)))
   (+ 1 (* x y))
   (- 1 y)))
#+end_src

#+begin_src scheme
(define (f x y)
  (let ((a (+ 1 (* x y)))
        (b (- 1 y)))
    (+ (* x (square a))
       (* y b)
       (* a b))))
#+end_src

ml 계열 언어의 let-in 신택스

* 1.3.3 일반적인 메소드로서의 프로시져
메소드 단어 정의 : 일정한 계획에 따른 방법. 정해진 순서가 있는 문제 해결법. 식.

** 이분법(Half-interval method, Bisection method)으로 방적식의 근 찾기.

[[https://ko.wikipedia.org/wiki/%EC%9D%B4%EB%B6%84%EB%B2%95_(%EC%88%98%ED%95%99)#cite_note-FOOTNOTEAbdelwahab_KharabRonald_B._Guenther201341-1][이분법(二分法, Bisection method)은 근이 반드시 존재하는 폐구간을 이분한 후, 이 중 근이 존재하는 하위 폐구간을 선택하는 것을 반복하여서 근을 찾는 알고리즘이다.]]
이진 검색과 비슷하다.

~f(x) = 0~ 인 함수의 근을 찾는 것. 즉 f를 계산해서 0이 나오는 x를 찾는 것.
~f(a) < 0 < f(b)~ 일 때 f는 a와 b 사이에 0이 있을 수 밖에 없다. 0을 찾기 위해
x를 a와 b의 평균값으로 두고 f(x)를 계산해본다.
결과 ~f(x) > 0~ 일 경우 x와 b 사이에 0이 나오는 값이 있을 것이다.
~f(x) = 0~ 이 될 때까지 계속 이를 반복한다.


*** 방법
#+begin_quote
[a, b]에서 연속인 함수 f에 대하여 f(a)f(b) < 0,인 폐구간 [a,b]에 대해서 계속해서 {\displaystyle {\frac {\left|b+a\right|}{2}}}{\displaystyle {\frac {\left|b+a\right|}{2}}}을 하여 나오는 또다른 수를 하나의 폐구간 끝점으로 잡은 새로운 폐구간을 만든다. 이와 같은 방법으로 계속 n번을 시행하게 되면 점점 함수 {\displaystyle f(x)=0\ }f(x)=0\ 를 만족하는 x에 다가가게 된다. 이런 방법을 이분법이라 한다.
#+end_quote


** 함수의 고정점 찾기
*** Fixed point, 고정점이란?

[[https://ko.wikipedia.org/wiki/%EA%B3%A0%EC%A0%95%EC%A0%90][수학에서 고정점(fixed point) 또는 부동점(invariant point)은 함수에서 옮겨지지 않는 점이다.]]
[[https://ko.wikipedia.org/wiki/%EA%B3%A0%EC%A0%95%EC%86%8C%EC%88%98%EC%A0%90][숫자에서의 고정 소수점(fixed point)]]이나 부동 소수점(floating point)과 의미가 다르다.

헷갈릴 수 있는 부분이 수학에서 함수의 부동은 움직이지 않는다는 의미이며, 숫자를 말할 때 부동은 떠서 움직인다는 의미의 일본식 한자이다.

여기서 말하는 고정점은 수학에서 함수에 대한 고정점이다.
~f(x) = x² - 3x + 4~ 에서 고정점은 2이다. 같은 함수 f를 계산할 때 f(2)는 언제나 2일 것이기 때문이다.
다른 말로 ~f(X) -> X~ 의 고정점은 ~f(x) = x~ 를 만족시키는 ~x ∈ X~ 이다.

* 결과 값으로서의 프로시져

지금까지 인자로 함수를 갖는 예들을 보았다. 함수를 리턴하는 함수를 만듦으로써 더 풍부한 표현을 할 수 있다.

 √{X} 는  ~y -> x/2~ 의 고정점이다. 이 때 평균 댐핑을 사용해서 근사치를 한 점으로 모아볼 수 있다.

 #+begin_src scheme
(define (average-damp f)
  (lambda (x)
    (average x (f x))))
 #+end_src

 인자로 함수를 받아 x와 f(x)에 대한 평균을 계산하는 람다 함수를 반환한다.
 #+begin_src scheme
((average-damp square) 10)
55
 #+end_src


 #+begin_src scheme
(define (cube-root x)
  (fixed-point
   (average-damp
    (lambda (y)
      (/ x (square y))))
   1.0))
 #+end_src
 

** 뉴튼 메서드

 [[https://evening-ds.tistory.com/38][뉴튼 메서드]]는 함수 결과값을 0으로 만들어주는 값을 찾을 때 유용하게 쓰인다.
 이차방정식에서 근을 구하는 과정과 비슷하지만 뉴턴랩슨법은 해를 구할 때까지 계속 숫자를 대입하는 방법이다.
 그래서 처음의 추정값을 잘 넣는 것이 중요할 것 같다.

 [[img:https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdiFfke%2FbtqLBM4unVY%2FhIAqB344b4cJazrIAGrNU0%2Fimg.jpg][function]]

 [[https://darkpgmr.tistory.com/58][뉴튼 메서드에 대한 다른 설명]]

** 추상화와 일급 함수

 근을 구하는 일반화된 방법 중 2가지 표현을 알아 보았다.
 하나는 부동점 검색, 하나는 뉴튼 메서드였는데, 뉴튼 메서드 자체가 부동점 검색으로 표현됨으로,
 사실상 근을 구하기 위한 부동점 연산의 두 가지 표현을 본 것과 같다.

*** (look for a fixed point of the average-damped version of y↦x/y)
 #+begin_src scheme
(define (sqrt x)
  (fixed-point-of-transform
   (lambda (y) (/ x y))
   average-damp
   1.0))
 #+end_src

*** (Newton’s method that finds a fixed point of the Newton transform of y↦y2−x)
 #+begin_src scheme
(define (sqrt x)
  (fixed-point-of-transform
   (lambda (y) (- (square y) x))
   newton-transform
   1.0))
 #+end_src


*** 적절한 추상화의 단계는?

프로그래머로서 우리가 작성하는 프로그램에 추상성을 부여할 기회를 놓치지 말아야 한다. 그 추상성을 통해 일반화하고, 더 강력한 추상성을 만들 수 있어야 한다. 하지만 가능한 높은 단계의 추상화로 프로그램을 작성하라는 말이 아니다. 경험이 많은 프로그래머들은 그들의 작업을 위해 어떤 단계의 추상화가 가장 적절한지 파악할 수 있다. 맥락을 고려해야 한다.
고차함수가 중요한 이유는 이들이 추상화된 개념을 다른 계산 가능한 원소들과 마찬가지로 명시적으로 사용할 수 있도록 하기 때문이다.


*** 일급 시민이란?

1. 변수로 이름 지을 수 있어야 한다.
2. 함수의 인자로 넘길 수 있어야 한다.
3. 함수의 값으로 리턴될 수 있어야 한다.
4. 데이터 구조 중 하나로 사용될 수 있어야 한다.
